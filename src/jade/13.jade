extends ./template.jade

block head
  script(type='text/x-mathjax-config').
    MathJax.Hub.Config({
      extensions: ["tex2jax.js"],
      jax: ["input/TeX","output/HTML-CSS"],
      tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}
    });
  script(src='js/MathJax/MathJax.js')
  script(src='js/parser.js')
  script(type="text/javascript").
    function texify(lojban) {
      return parser.parse(lojban);
    }
block quote
  | Everyone who's thought about it says {ro} doesn't import. Sadly, we don't know from that whether anyone has thought about it.
//-For chrissake, that compiler shouldn't have been allowed to graduate from kindergarten.  We're talking "sloth that was dropped on the head as a baby" level retardation levels here.
//- Linus Torvalds
block qauthor
  | xalbo

block main
  p Thus far, we have already gone over the basics of negation.  In the previous chapter, we have gone over the effects of inner and outer quantifiers on gadri.  However, from a logical perspective, we have taken a very simplistic view of what they #[span.i are].
  p When I say #[span.l re lo ci gerku cu broda] I describe that #[span.i "Two of the three dogs broda."]
  p However, what am I truly describing when I say that?  Without defining such a statement in mathematical terms it hardly has more than a tenuous definition, no better than the English equivalent.  Lojban is designed to rectify this.
  p To properly demonstrate the specific meaning of this statement, existential quantifiers will be introduced.  The most simple usage of existential quantifiers in Lojban is simply plain #[span.l da] without a quantifier before it.  We also have #[span.l de] and #[span.l di] so we can use more quantifiers.
  aside If you're familiar with quantification in logic, this chapter will probably be really easy for you.  AKA,  #[span.l da broda] means $ \exists x \left ( broda(x) \right ) $ and #[span.l ro da broda] means $ \forall x \left ( broda(x) \right ) $.  #[span.l da broda ro de] means $ \exists x \forall y \left ( broda(x,y) \right ) $
  p The most rudimentary, single-word definition of #[span.l da] is #[span.i "something"].  However, the mechanisms behind it are more complex than that.  More accurately, it can be expressed as #[span.i "there exists something"].  #[span.l da gerku] means "There exists something such that it is a dog."  As long as there is at least one thing in the entire universe that happens to be a dog, #[span.l da gerku] holds true.
  p You can quantify #[span.l da], as well.  #[span.l ro da] means #[span.i "everything"], or more specifically, #[span.i "for all"].  #[span.l= "su'o da"] is the default quantification of #[span.l da]; people will typically just say #[span.l da] to mean "at least one" in casual speech.  In contrast, #[span.l ci da] means #[span.l "exactly three things"], no more and no less.
  p Some example true statements are #[span.i "There exists an even prime number"] (the number 2), #[span.i "There exists an odd prime number"] (all other primes), and #[span.i "For all integers x, 2*x is even"].
  p To make clear how these statements work, we will observe the effects of these quantifiers from the perspective of a computer scientist. First we will focus on the effects of existential quantification (e.g. #[span.l da]) and universal quantification (e.g. #[span.l ro da]).
  div#tabs
    div.tab(title="Haskell")
      p Demonstrating quantifiers is easy in Haskell.  In our demonstration we will be using foldr and boolean operators to evaluate whether math statements that use quantifiers are true.
      p Consider that in Haskell, #[span.code or = foldr (||) False], and #[span.code and = foldr (&&) True].  This means that, if you have a list of booleans, "a single bad apple spoils the bunch" in that if even a single element in the list is true, #[span.code or] returns true for the entire list.  Similarly, if even a single element is false with #[span.code and] it returns false for the entire list.
      //p #[span.code or] is to #[span.l da] as #[span.code and] is to #[span.l ro da].  #[span.l da gerku] is true if there's even a single thing in the entire universe which is a dog, and #[span.l ro da gerku] is only true if every single thing in the entire universe is dogs.  #[span.l ro da gerku] can be proven false without a second thought, since plenty of things all around you are not dogs.  The #[span.code foldr] stops the moment it finds a single thing that isn't a dog, thanks to the lazy nature of Haskell.
      p A Haskellization of #[span.l da poi prenu cu se kanla lo zirpu] ("There exists somebody with purple eyes.") would be #[span.code or [purple x | x <- people]], where #[span.code people] is a list of every person on Earth and #[span.code purple] is a function that returns a Bool as to whether a given person has purple eyes.  Similarly, #[span.l ro da poi prenu cu se kanla lo zirpu] ("All people have purple eyes.") would be #[span.code and [purple x | x <- people]].  Both of these statements would be false, of course.
    div.tab(title="C++")
    div.tab(title="Python")

  p A consequence of this is that it is easy to prove, for example, there #[span.i exists] a person with non-purple eyes (a common feature) and that not all people have purple eyes, but hard to prove that #[span.i all] people have non-purple eyes or that there exists someone who does have purple eyes.  The first two are easy because it only takes one instance to confirm the statement, but the second two are hard because you have to either check every single person in the world's eyes, or get smart about the way you prove the statement.  (AKA, you demonstrate it's biologically impossible for people to have naturally purple eyes, for example.)
  p To negate a statement where the quantifier is #[span.i inside] what's being negated, you #[span.b invert (negate) the quantifier and then negate the claim inside].  The negation of #[span.l= "su'o"] is #[span.l ro] and vice versa.  So the negation of "for all" is "there exists"   Think about this.  If it is false that all people have purple eyes, then there must exist at least one person who does not have purple eyes, right?  These two statements are the same!
  p Consider the scope of negation in these two (equivalent) statements.  We're going to use English notation that includes parentheses to show what sections of the sentence are in the negation's scope.  The former can be written as "([not] all people have purple eyes)", and the latter can be written as "there exists someone who ([not] has purple eyes)".  As you can see, the quantifier "all" has been inverted (negated) to "exists" and the claim "has purple eyes" has been negated.
  aside Have you noticed the connection to De Morgan's laws yet?  The system of negation I'm teaching is really just a different way of looking at De Morgan's laws.  These two sentences' Haskell translations are #[span.code (not . and) [purple x | x <- people]] and #[span.code or [(not . purple) x | x <- people]], respectively.  Do you see it's one giant rendition of the same concept?
  p Lojban's #[span.l naku] is similar to #[span.l na], but it acts as a term rather than a selbri operator. It functions much like opening one of these "negation scopes".  #[span.l naku ro da poi prenu cu se kanla lo zirpu] = "([not] all people have purple eyes)", and #[span.l= "da poi prenu ku'o naku se kanla lo zirpu"] = "there exists someone who ([not] has purple eyes)".  Again, both of these statements are equal.
  p There are other implications of this behavior of #[span.l naku].  #[span.l naku naku broda] as you know is equivalent to #[span.l broda], but in addition, #[span.l naku da naku broda] is equivalent to #[span.l ro da broda].  Consider the "negation scopes" of this sentence: "([not] there exists something that does ([not] broda))".  Multiple #[span.l naku] simply negate everything to the right of them.  Doesn't it make sense that "It is false that there exists something which doesn't broda" is equivalent to "Everything brodas"?  Similarly, "It is false that all things don't broda" is equivalent to "There exists something which brodas".  (Do note that #[span.l naku broda] is the same as #[span.l broda naku]; there's still an odd number of negations.  "negation scope" only affects terms of a bridi.)
  aside In Haskell, #[span.code and []] is True, of course. (#[span.code or []] is False) This theme of logical and being "shut off" by an instance of false is one of the reasons why #[span.l ro] does not have something called "existential import".  Not having existential import means #[span.l ro da poi broda cu gerku] is true even if nothing actually brodas.  Our meaning of "all" is "100%" rather than "100% and at least one".
  p Now we will investigate the effects of using multiple quantifiers in the same sentence.  Remember that we can also use #[span.l de] and #[span.l di] as additional quantifiers.  Consider them like #[span.i x], #[span.i y], and #[span.i z].  Which one you choose doesn't matter, but in quantification, the order you put them in matters.  #[span.l ro da poi prenu cu broda de] is different from #[span.l da poi prenu cu broda ro de].  To help understand why and how these sentences differ, we will introduce the concept of the prenex.
  p When a quantified variable appears for the first time in a bridi, it could be said that it "moves to the prenex".  The prenex is something you can optionally state at the start of a bridi.  To end the prenex, you say #[span.l= "zo'u"].  Grammatically, the prenex is a sequence of terms followed by #[span.l= "zo'u"].  Some examples of this behavior of "moving to the prenex" are #[span.l da gerku] = #[span.l= "da zo'u da gerku"] and #[span.l ro da gerku] = #[span.l= "ro da zo'u da gerku"]
  p When you have more than one quantifer, they move to the prenex in order like so: #[span.l ro da broda de] = #[span.l= "ro da de zo'u da broda de"] and #[span.l da broda ro de] = #[span.l= "da ro de zo'u da broda de"]
  p We can also use quantifiers as a mechanic to state quantifiers in a diffent order than they were grammatically introduced: #[span.l da broda ro de] = #[span.l= "da ro de zo'u de se broda da"]
  aside Remember #[span.l da]/#[span.l de]/#[span.l di] are like #[span.i x], #[span.i y], and #[span.i z].  You could swap #[span.l da] and #[span.l de] in any sentence and it would still have the same meaning.
  p Now what do these sentences mean?  #[span.l ro da broda de] translates to "Everything brodas something" and #[span.l da broda rode] translates to "Something brodas everything".  However, the English translation falls short, because you would think those two sentences are simply inverted when they in fact have entirely different meanings.   To understand this, we will show these statements using mathematical logic notation.  It sounds hard, but it's actually literally a one to one conversion with the concept of the prenex we just introduced.
  p We're going to use two new symbols, which represent things we've already learned.  $\exists$ means "there exists".  $\forall$ means "for all".  Sounds familiar, right?  In fact, the translation is easy: #[span.l= "da zo'u da broda"] = $ \exists x \left ( broda(x) \right ) $, and  #[span.l= "ro da zo'u da broda"] = $ \forall x \left ( broda(x) \right ) $.  In the first statement, we're using the special symbol in $ \exists x $ to quantify that #[span.i there exists an x] such that $ broda(x) $ (the thing inside the parentheses) is true.  In the second statement, we're using the special symbol in $ \forall x $ to quantify that #[span.i for every possible x], $ broda(x) $ is always true.
  p Finally, we approach the answer you've been waiting for.  Now what happens when we use multiple quantifiers, such as in #[span.l= "ro da de zo'u da broda de"]?  Well, that translates to $ \forall x \exists y \left ( broda(x,y) \right ) $, which is just shorthand notation for $ \forall x \left ( \exists y \left ( broda(x,y) \right ) \right ) $.  This in English translates to "For every possible thing x, there's at least one thing y such that x brodas y", in the sense that $y$ can be completely different for each $x$.
  aside Notice how the $\exists$-claim is "one level deep" inside the $\forall$-claim.  You could look at this very similarly to the way you look at multiple levels of iteration, or multiple levels of list comprehensions in Haskell/Python.  A simple example of the latter is #[span.code [(x,y) | x <- [1..5], y <- [1..5]]], but again, we can write Lojban in Haskell: #[span.l ro da brode de] = $ \forall x \exists y \left ( broda(x,y) \right ) $ = #[span.code and [ or [broda x y | y <- everything] | x <- everything]]
  p To assist comprehension, here are some example sentences:
  table(style="font-size:75%")
    tr
      td
        span.l da broda de
      td
        span.l da de zo'u da broda de
      td $ \exists x \exists y \left ( broda(x,y) \right ) $
      td "Something brodas something"
    tr
      td
        span.l da broda ro de
      td
        span.l da ro de zo'u da broda de
      td $ \exists x \forall y \left ( broda(x,y) \right ) $
      td "There exists something that brodas all things" *
    tr
      td
        span.l ro da broda de
      td
        span.l ro da de zo'u da broda de
      td $ \forall x \exists y \left ( broda(x,y) \right ) $
      td "For all things, there's something that it brodas" **
    tr
      td
        span.l ro da broda ro de
      td
        span.l ro da ro de zo'u da broda de
      td $ \forall x \forall y \left ( broda(x,y) \right ) $
      td "Everything brodas everything"
  p(style="font-size:60%;line-height:1;") * as in, a single thing $x$ exists where any $y$ can be paired with it and "$x$ broda $y$" will be true.#[br]** as in, for any $x$, there will always be at least one $y$, possibly a different $y$ for each one, that you can pair with it so "$x$ broda $y$" will be true.
  p The last thing to know is how negation affects multiple quantification.  To negate a statement in math, we use the $\lnot$ symbol.  $\lnot broda()$ is the same as #[span.l na broda]/#[span.l naku broda].
  p There is a difference between #[span.l da naku broda] and #[span.l naku da broda].  The former is $\exists x \left ( \lnot broda(x) \right )$ ("there exists an x that does not broda") and the latter is $\lnot \exists x \left ( broda(x) \right)$ ("it is false that there exists an x that brodas").
  p To move negation from outside quantification to inside the claim being quantified, you #[span.b invert (negate) the quantifier and then negate the claim inside].  Sounds familiar, right?  I bolded both times I said that just for you.  We remember that the inverse of "there exists" is "for all" and vice versa, so $\lnot \exists x \left ( broda(x) \right) \equiv \forall x \left ( \lnot broda(x) \right)$ (the triple-equals expresses logical equivalence- that is, that they state the exact same thing).
  p The way to negate with multiple quantifiers is just an extension of this concept.  $\lnot \exists x \left ( P(x) \right) \equiv \forall x \left ( \lnot P(x) \right )$ for any proposition $P(x)$.  $P(x)$ could be $broda(x)$, if we want.  But what if $P(x)$ was $\forall y \left ( broda(x,y) \right)$?  Then it must follow that $\lnot \exists x \left ( \forall y \left ( broda(x,y) \right) \right) \equiv \forall x \left ( \lnot \forall y \left ( broda(x,y) \right) \right )$.  If we can do this once, we can do this twice, so $\forall x \left ( \lnot \forall y \left ( broda(x,y) \right) \right ) \equiv \forall x \left ( \exists y \left ( \lnot broda(x,y) \right) \right ) \equiv \forall x \exists y \left ( \lnot broda(x,y) \right)$.  Effectively, you are "carrying" the negation deeper into the expression while inverting quantifiers to maintain equivalence.
  p In order to negate quantifiers when you have a prenex, fittingly, the negation has to be in the middle of the prenex, similar to mathematical expressions.  Here is another table of examples to demonstrate regularity of behavior:
  table(style="font-size:75%")
    tr
      td
        span.l naku da broda de
      td
        span.l naku da de zo'u da broda de
      td $ \lnot \exists x \exists y \left ( broda(x,y) \right ) $ #[br] $\equiv \forall x \forall y \left ( \lnot broda(x,y) \right )$
      td "Nothing brodas anything"
    tr
      td
        span.l da naku broda ro de
      td
        span.l da naku ro de zo'u da broda de
      td $ \exists x \lnot \forall y \left ( broda(x,y) \right ) $ #[br] $\equiv \exists x \exists y \left ( \lnot broda(x,y) \right )$
      td "Something doesn't broda another thing"
    tr
      td
        span.l ro da broda ro de naku
      td
        span.l da ro de naku zo'u da broda de
        br
        //-stupidity
        | #[span or ]
        span.l da ro de zo'u naku da broda de
        br
        | #[span or ]
        span.l da ro de zo'u da broda de naku
        span= " *"
      td $\exists x \forall y \left ( \lnot broda(x,y) \right )$
      td "Something doesn't broda anything"
    tr
      td
        span.l naku da naku broda de
      td
        span.l naku da naku de zo'u da broda de
      td $ \lnot \exists x \lnot \exists y \left ( broda(x,y) \right ) $ #[br] $\equiv \forall x \lnot \lnot \exists y \left ( broda(x,y) \right )$ #[br] $\equiv \forall x \exists y \left ( broda(x,y) \right )$
      td "Everything brodas something" or, more true to the original wording "there doesn't exist something which #[span.i= "doesn't"] broda something" **

  p(style="font-size:60%;line-height:1;") *: Notice how once the actual quantifiers are in the prenex, the position of #[span.l naku] in the main bridi doesn't matter.  It just negates the claim. #[br] **: Look! We "carry" the negation in, and it creates a double negation later which eliminates itself.  We actually saw this behavior earlier when we were looking at this type of behavior as "negation scope".
  p We have gone over logical quantification and negation's effects on it; now, we will cover the final question asked in the beginning of this chapter:  What does #[span.l re lo ci gerku cu broda] mean?  As it turns out, "outer" quantification, the #[span.l re], is no different from quantification of #[span.l da].  The inner quantification, the #[span.l ci], however, is a special concept specific to gadri.  Considering that #[span.l re] is just a quantification of #[span.l lo ci gerku], we must understand how these two parts function individually.  #[span.l lo ci gerku cu broda] on its own, means "3 dogs broda", with no implications regarding whether it is distributive or not, as you already know.
  p However, what does #[span.l re] do?  First, we will look at #[span.l re broda].  #[span.l re broda] is equivalent to #[span.l re da poi broda] (assuming there's no other quantifiers to interfere).  Similarly, #[span.l= "mu ko'a"] where #[span.l= "ko'a"] is equivalent to any arbitrary sumti is the same as #[span.l= "mu da poi ka'e me ko'a"].  #[span.l= "me"] is the word for subset (the set of primes is a subset of the set of integers) and #[span.l= "ka'e"] is the word for "can be true" (not necessarily is).  So #[span.l= "ro ko'a"] means every single #[span.i individual] which is a member of #[span.l= "ko'a"]!  This is why #[span.l ro lo mu bakni] means "each/all of the 5 cows individually" and #[span.l re lo ci gerku] means "2 of the 3 dogs individually".  This also means that #[span.l naku] inverts outer quantifiers but #[span.b not] inner quantifiers.
